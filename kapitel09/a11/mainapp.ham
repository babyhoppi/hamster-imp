/*imperative program*/
/**
 * Kapitel 09, Aufgabe 11
 *
 * @author Steffen Bauer
 *
 */
 
void kehrtUm() {

	linksUm();
	linksUm();
}

void rechtsUm() {

	kehrtUm();
	linksUm();
}

void sicheresNimm() {

	if( kornDa() )
		nimm();
}

void sicheresVor() {
	
	if( vornFrei() )
		vor();
}

void sicheresGib() {
	
	if( !maulLeer() )
		gib();
}

/**
 * füllt eine Poolreihe mit Körnern
 *
 */
void fuelleReihe() {

	sicheresGib();
	sicheresVor();

	sicheresGib();
	sicheresVor();

	sicheresGib();
	sicheresVor();

	sicheresGib();

}

/**
 * nimmt alle 16 Körner von der Kachel auf
 *
 */
void nimmAlle() {

	sicheresNimm();
	sicheresNimm();
	sicheresNimm();
	sicheresNimm();

	sicheresNimm();
	sicheresNimm();
	sicheresNimm();
	sicheresNimm();

	sicheresNimm();
	sicheresNimm();
	sicheresNimm();
	sicheresNimm();

	sicheresNimm();
	sicheresNimm();
	sicheresNimm();
	sicheresNimm();
}

/**
 * läuft zum Beginn der Poolreihe zurück
 *
 */
void laufeZurueck() {
	
	sicheresVor();
	sicheresVor();
	sicheresVor();
}

/**
 * Hauptprogramm steuert die einzelnen Phasen:
 *
 * - Körner aufnehmen
 * - Poolreihen füllen
 * 
 */ 
void main() {
    
    // Körner abholen
    kehrtUm();
    sicheresVor();
    nimmAlle();	
    
    // zurück zum Start
    kehrtUm();
    sicheresVor();
    
    // ... und in den Pool steigen
    sicheresVor();
    rechtsUm();
    
    // und es geht los mit Poolreihe 1, falls vorhanden
	if( vornFrei() ) {
		vor();
		linksUm();
		fuelleReihe();
		kehrtUm();
		laufeZurueck();
		linksUm();
	}

    // ... dann Poolreihe 2, falls vorhanden
	if( vornFrei() ) {
		vor();
		linksUm();
		fuelleReihe();
		kehrtUm();
		laufeZurueck();
		linksUm();
	}
    
    // ... dann Poolreihe 3, falls vorhanden
	if( vornFrei() ) {
		vor();
		linksUm();
		fuelleReihe();
		kehrtUm();
		laufeZurueck();
		linksUm();
	}
    
    // ... dann Poolreihe 4, falls vorhanden
	if( vornFrei() ) {
		vor();
		linksUm();
		fuelleReihe();
		kehrtUm();
		laufeZurueck();
		linksUm();
	}
}
